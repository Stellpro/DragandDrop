@using DragandDrop.Data
<h3>@ListStatus </h3>
<ul class="dropzone @dropClass"
    ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);"
    @ondrop="HandleDrop"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave">
    
    @foreach (var task in Tasks)
    {
        <TestTask TaskModel="task"/>
    }
</ul>
@code {
    [CascadingParameter] TestTaskContainer Container { get; set; }
    [Parameter] public TaskStatuses ListStatus { get; set; }
    [Parameter] public TaskStatuses[] AllowedStatuses { get; set; }

    List<TaskModel> Tasks=new List<TaskModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Tasks.Clear();
        Tasks.AddRange(Container.Tasks.Where(x=>x.Status==ListStatus));
    }

    private void HandleDragEnter()
    {
        if(ListStatus==Container.PayLoad.Status) return;
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }
    private async Task HandleDrop()
    {
        dropClass = "";
        await Container.UpdateJobAsync(ListStatus);
    }
}
